name: Build Docker Images

on:
  push:
    branches:
      - master
        paths:
      - 'config/**'
      - 'Dockerfile'
      - '.github/workflows/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
    - name: Checkout master
    - uses: actions/checkout@v1
    - name: Get release version
      id: get_version
      run: echo ::set-env name=RELEASE_NAME::$(echo ${GITHUB_SHA:0:7})

    # Install doctl.
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
    - name: Build container image
      run: docker build -t ${{ secrets.REGISTRY_NAME }}/ezwash-crm-php -f .docker/php/prod.Dockerfile .

    # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
    - name: Build container image
      run: docker build -t ${{ secrets.REGISTRY_NAME }}/ezwash-crm-nginx -f .docker/nginx/prod.Dockerfile .

    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 1200

    # Push Php Image to the registry
    - name: Push image to DigitalOcean Container Registry
      run: docker push ${{ secrets.REGISTRY_NAME }}/ezwash-crm-php
        tags: "latest,${{ env.RELEASE_NAME }}"

    # Push Nginx Image to the registry
    - name: Push image to DigitalOcean Container Registry
      run: docker push ${{ secrets.REGISTRY_NAME }}/ezwash-crm-nginx
        tags: "latest,${{ env.RELEASE_NAME }}"

      - name: Push image to DigitalOcean Container Registry
        run: docker push ${{ secrets.REGISTRY_NAME }}/ezwash-crm-nginx

      - name: Patch new image on infrastructure
        env:
          RELEASE_VERSION: ${{ env.RELEASE_NAME }}
          GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          GITHUB_NAME: 'Automated from Github Actions'
          GITHUB_PASSWORD: ${{ secrets.GIT_TOKEN }}
          GIT_REPO: "https://github.com/ashedrack/laravel-docker-infra-deploy"
        run: |
          set -e
          # Installs Kustomize
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          chmod +x ./kustomize && sudo mv ./kustomize /usr/local/bin/kustomize
          # Install HUB CLI tool
          curl -LO https://github.com/github/hub/releases/download/v2.11.2/hub-linux-amd64-2.11.2.tgz
          tar -zxf hub-linux-amd64-2.11.2.tgz
          cd hub-linux-amd64-2.11.2
          sudo ./install
          hub --version
          cd .. && rm -rf hub-linux-amd64-2.11.2/ hub-linux-amd64-2.11.2.tgz
          # Configuring Git
          git config --global credential.helper store
          echo "https://${GITHUB_TOKEN}:x-oauth-basic@github.com" > "${HOME}/.git-credentials"
          hub config --global hub.protocol https

          # Cloning the infrastructure repository
          hub clone ${GIT_REPO} infrastructure-repo
          cd infrastructure-repo
          # Create a new branch for the release
          git checkout -b release-${RELEASE_VERSION}
          # Patch the new version using kustomize
          kustomize edit set image laravel-app-php=registry.digitalocean.com/inits/ezwash-crm-php:${RELEASE_VERSION}
          kustomize edit set image laravel-app-nginx=registry.digitalocean.com/inits/ezwash-crm-nginx:${RELEASE_VERSION}
          # Add the changes to the infrastructure repository
          if [[ `git status --porcelain` ]]; then
            hub config --global user.name "${GITHUB_NAME}"
            hub config --global user.email "${GIT_EMAIL}"
            # Adds the kustomization file to git stage
            hub add kustomization.yml
            hub commit -F- <<EOF
          Auto-release of the image version
          This commit updates the application container image version to: ${RELEASE_VERSION}
          EOF
            # Create the PR in the infrastructure repository
            hub pull-request -p -m "Auto-release of image version: ${RELEASE_VERSION}"
          else
            echo "Everything is up-to-date"
          fi
















